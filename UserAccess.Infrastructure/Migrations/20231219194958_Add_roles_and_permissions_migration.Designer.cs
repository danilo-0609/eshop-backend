// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAccess.Infrastructure;

#nullable disable

namespace UserAccess.Infrastructure.Migrations
{
    [DbContext(typeof(UserAccessDbContext))]
    [Migration("20231219194958_Add_roles_and_permissions_migration")]
    partial class Addrolesandpermissionsmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UserAccess.Domain.UserRegistrations.UserRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRegistrationId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<DateTime?>("ConfirmedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ConfirmedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("LastName");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RegisteredDate");

                    b.HasKey("Id");

                    b.ToTable("UserRegistrations", "users");
                });

            modelBuilder.Entity("UserAccess.Domain.Users.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Permissions", "users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AccessUsers"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ReadUser"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ChangeUser"
                        },
                        new
                        {
                            Id = 4,
                            Name = "RemoveUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "DeleteComment"
                        },
                        new
                        {
                            Id = 6,
                            Name = "GetComments"
                        },
                        new
                        {
                            Id = 7,
                            Name = "UpdateComment"
                        },
                        new
                        {
                            Id = 8,
                            Name = "AddComment"
                        },
                        new
                        {
                            Id = 9,
                            Name = "GetProducts"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ModifyProduct"
                        },
                        new
                        {
                            Id = 11,
                            Name = "RemoveProduct"
                        },
                        new
                        {
                            Id = 12,
                            Name = "GetSales"
                        },
                        new
                        {
                            Id = 13,
                            Name = "GetItems"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetOrders"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GetBasket"
                        },
                        new
                        {
                            Id = 16,
                            Name = "GetBuys"
                        },
                        new
                        {
                            Id = 17,
                            Name = "CancelBuy"
                        },
                        new
                        {
                            Id = 18,
                            Name = "BuyItem"
                        },
                        new
                        {
                            Id = 20,
                            Name = "AddItemInBasket"
                        },
                        new
                        {
                            Id = 21,
                            Name = "DeleteBasketItem"
                        },
                        new
                        {
                            Id = 22,
                            Name = "BuyBasket"
                        },
                        new
                        {
                            Id = 23,
                            Name = "PublishProduct"
                        },
                        new
                        {
                            Id = 24,
                            Name = "GetRatings"
                        },
                        new
                        {
                            Id = 25,
                            Name = "AddRating"
                        },
                        new
                        {
                            Id = 26,
                            Name = "UpdateRating"
                        },
                        new
                        {
                            Id = 27,
                            Name = "DeleteRating"
                        },
                        new
                        {
                            Id = 28,
                            Name = "SaleProduct"
                        },
                        new
                        {
                            Id = 29,
                            Name = "UpdateProduct"
                        },
                        new
                        {
                            Id = 30,
                            Name = "GetUserRegistration"
                        });
                });

            modelBuilder.Entity("UserAccess.Domain.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.HasIndex("UserId");

                    b.ToTable("Roles", "users");
                });

            modelBuilder.Entity("UserAccess.Domain.Users.RolePermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("PermissionId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission", "users");
                });

            modelBuilder.Entity("UserAccess.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDateTime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("FirstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("LastName");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("Login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDateTime");

                    b.HasKey("Id");

                    b.ToTable("Users", "users");
                });

            modelBuilder.Entity("UserAccess.Domain.UserRegistrations.UserRegistration", b =>
                {
                    b.OwnsOne("UserAccess.Domain.Common.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserRegistrationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("Password");

                            b1.HasKey("UserRegistrationId");

                            b1.ToTable("UserRegistrations", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserRegistrationId");
                        });

                    b.OwnsOne("UserAccess.Domain.UserRegistrations.UserRegistrationStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("UserRegistrationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("StatusCode");

                            b1.HasKey("UserRegistrationId");

                            b1.ToTable("UserRegistrations", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserRegistrationId");
                        });

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("UserAccess.Domain.Users.Role", b =>
                {
                    b.HasOne("UserAccess.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAccess.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserAccess.Domain.Users.RolePermission", b =>
                {
                    b.HasOne("UserAccess.Domain.Users.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserAccess.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserAccess.Domain.Users.User", b =>
                {
                    b.OwnsOne("UserAccess.Domain.Common.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("Password");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
