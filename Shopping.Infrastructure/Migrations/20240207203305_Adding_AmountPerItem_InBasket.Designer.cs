// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping.Infrastructure;

#nullable disable

namespace Shopping.Infrastructure.Migrations
{
    [DbContext(typeof(ShoppingDbContext))]
    [Migration("20240207203305_Adding_AmountPerItem_InBasket")]
    partial class AddingAmountPerItemInBasket
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shopping.Domain.Basket.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BasketId");

                    b.Property<int>("AmountOfProducts")
                        .HasColumnType("int")
                        .HasColumnName("AmountOfProducts");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal (18, 2)")
                        .HasColumnName("TotalAmount");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("baskets", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Basket.BasketItem", b =>
                {
                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BasketId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<int>("AmountPerItem")
                        .HasColumnType("int")
                        .HasColumnName("AmountPerItem");

                    b.Property<Guid>("BasketId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemIdsValue")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BasketId", "ItemId");

                    b.HasIndex("BasketId1");

                    b.HasIndex("ItemIdsValue");

                    b.ToTable("BasketItems", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Buying.Buy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BuyId");

                    b.Property<int>("AmountOfProducts")
                        .HasColumnType("int")
                        .HasColumnName("AmountOfProduct");

                    b.Property<Guid>("BuyerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BuyerId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<DateTime>("OcurredOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("OcurredOn");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal (18, 2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("Id");

                    b.ToTable("Buys", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<int>("InStock")
                        .HasColumnType("int")
                        .HasColumnName("InStock");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("Price");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SellerId");

                    b.Property<string>("StockStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StockStatus");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Items", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Items.ItemId", b =>
                {
                    b.Property<Guid>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Value");

                    b.ToTable("ItemId");
                });

            modelBuilder.Entity("Shopping.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<int>("AmountOfItems")
                        .HasColumnType("int")
                        .HasColumnName("AmountOfItems");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CompletedOn");

                    b.Property<DateTime?>("ConfirmedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ConfirmedOn");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<DateTime?>("ExpiredOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpireOn");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<DateTime?>("PayedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("PayedOn");

                    b.Property<DateTime>("PlacedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("PlacedOn");

                    b.Property<decimal>("TotalMoneyAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("TotalMoneyAmount");

                    b.HasKey("Id");

                    b.ToTable("Orders", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PaymentId");

                    b.Property<decimal>("MoneyAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MoneyAmount");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("PayedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("PayedOn");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PayerId");

                    b.HasKey("Id");

                    b.ToTable("Payments", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Wishes.Wish", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WishId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit")
                        .HasColumnName("IsPrivate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Wishes", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Wishes.WishItem", b =>
                {
                    b.Property<Guid>("WishId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WishId");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ItemId");

                    b.Property<Guid>("ItemsValue")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WishId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WishId", "ItemId");

                    b.HasIndex("ItemsValue");

                    b.HasIndex("WishId1");

                    b.ToTable("WishItems", "shopping");
                });

            modelBuilder.Entity("Shopping.Infrastructure.Outbox.ShoppingOutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Error");

                    b.Property<DateTime>("OcurredOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("OcurredOnUtc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("ProcessedOnUtc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.ToTable("ShoppingOutboxMessages", "shopping");
                });

            modelBuilder.Entity("Shopping.Domain.Basket.BasketItem", b =>
                {
                    b.HasOne("Shopping.Domain.Basket.Basket", null)
                        .WithMany()
                        .HasForeignKey("BasketId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping.Domain.Items.ItemId", null)
                        .WithMany()
                        .HasForeignKey("ItemIdsValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shopping.Domain.Orders.Order", b =>
                {
                    b.OwnsOne("Shopping.Domain.Orders.OrderStatus", "OrderStatus", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("OrderStatus");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders", "shopping");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("OrderStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Shopping.Domain.Wishes.WishItem", b =>
                {
                    b.HasOne("Shopping.Domain.Items.ItemId", null)
                        .WithMany()
                        .HasForeignKey("ItemsValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping.Domain.Wishes.Wish", null)
                        .WithMany()
                        .HasForeignKey("WishId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
